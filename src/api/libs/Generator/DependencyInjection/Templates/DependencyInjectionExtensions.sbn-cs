//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.DependencyInjection.Extensions;

namespace Sisa.Extensions;

/// <summary>
/// Extensions for <see cref="IServiceCollection"/>.
/// </summary>
public static partial class ServiceCollectionExtensions
{
    /// <summary>
    /// Add the dependencies resolver.
    /// </summary>
    /// <param name="services"></param>
    /// <returns></returns>
    public static IServiceCollection Add{{project_name}}Dependencies(this IServiceCollection services)
    {
        services.AddTransientServices();
        services.AddScopedServices();
        services.AddSingletonServices();

        return services;
    }

    /// <summary>
    /// Add transient services;
    /// </summary>
    /// <param name="services"></param>
    /// <returns></returns>
    private static IServiceCollection AddTransientServices(this IServiceCollection services)
    {
        {{~ for service in transient_services ~}}
        {{~ if service.interface_name ~}}
        {{~ if service.key ~}}
        services.TryAddTransient<global::{{ service.interface_name }}, global::{{ service.implement_name }}>({{ service.key }});
        {{~ else ~}}
        services.TryAddTransient<global::{{ service.interface_name }}, global::{{ service.implement_name }}>();
        {{~ end ~}}
        {{~ else ~}}
        services.TryAddTransient<global::{{ service.implement_name }}>();
        {{~ end ~}}
        {{~ end ~}}

        return services;
    }

    /// <summary>
    /// Add scoped services;
    /// </summary>
    /// <param name="services"></param>
    /// <returns></returns>
    private static IServiceCollection AddScopedServices(this IServiceCollection services)
    {
        {{~ for service in scoped_services ~}}
        {{~ if service.interface_name ~}}
        {{~ if service.key ~}}
        services.TryAddTransient<global::{{ service.interface_name }}, global::{{ service.implement_name }}>({{ service.key }});
        {{~ else ~}}
        services.TryAddTransient<global::{{ service.interface_name }}, global::{{ service.implement_name }}>();
        {{~ end ~}}
        {{~ else ~}}
        services.TryAddTransient<global::{{ service.implement_name }}>();
        {{~ end ~}}
        {{~ end ~}}

        return services;
    }

    /// <summary>
    /// Add singleton services;
    /// </summary>
    /// <param name="services"></param>
    /// <returns></returns>
    private static IServiceCollection AddSingletonServices(this IServiceCollection services)
    {
        {{~ for service in singleton_services ~}}
        {{~ if service.interface_name ~}}
        {{~ if service.key ~}}
        services.TryAddTransient<global::{{ service.interface_name }}, global::{{ service.implement_name }}>({{ service.key }});
        {{~ else ~}}
        services.TryAddTransient<global::{{ service.interface_name }}, global::{{ service.implement_name }}>();
        {{~ end ~}}
        {{~ else ~}}
        services.TryAddTransient<global::{{ service.implement_name }}>();
        {{~ end ~}}
        {{~ end ~}}

        return services;
    }
}
